from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from .models import User, Note


# ===============================
#   –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å users
# ===============================
class UsersRepo:
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç.
    """

    def __init__(self, sessionmaker):
        # sessionmaker ‚Äî —ç—Ç–æ —Ñ–∞–±—Ä–∏–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–∏–∑ base.py)
        self.sm = sessionmaker

    async def ensure(self, tg_id: int, username: str | None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç.
        """
        async with self.sm() as s:  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            u = await s.get(User, tg_id)  # –∏—â–µ–º –ø–æ id (primary key)
            if not u:
                s.add(User(id=tg_id, username=username))
                await s.commit()


# ===============================
#   –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å notes
# ===============================
class NotesRepo:
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–º–µ—Ç–æ–∫.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä–∫—É –∑–∞–º–µ—Ç–æ–∫.
    """

    def __init__(self, sessionmaker):
        self.sm = sessionmaker

    async def create(self, user_id: int, text: str, category: str | None = None, description: str | None = None):
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram ID)
            text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
            category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –ò–ò)
            description: –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ò–ò
        """
        async with self.sm() as s:
            note = Note(
                user_id=user_id,
                text=text,
                category=category,
                description=description,
                status="active",
            )
            s.add(note)
            await s.commit()
            await s.refresh(note)
            return note

    async def list_latest(self, user_id: int, limit: int = 20):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        async with self.sm() as s:
            query = (
                select(Note)
                .where(Note.user_id == user_id, Note.status == "active")
                .order_by(Note.created_at.desc())
                .limit(limit)
            )
            result = await s.execute(query)
            return result.scalars().all()

    # ‚Üê –ù–û–í–´–ô –ú–ï–¢–û–î: –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async def list_by_category(self, user_id: int, category: str, limit: int = 20):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            category: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "üõí –ü–æ–∫—É–ø–∫–∏")
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫
        """
        async with self.sm() as s:
            query = (
                select(Note)
                .where(
                    Note.user_id == user_id,
                    Note.category == category,
                    Note.status == "active"
                )
                .order_by(Note.created_at.desc())
                .limit(limit)
            )
            result = await s.execute(query)
            return result.scalars().all()

    # ‚Üê –ù–û–í–´–ô –ú–ï–¢–û–î: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def get_all_categories(self, user_id: int):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–º–µ—Ç–æ–∫.
        
        Returns:
            —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (category, count)
            ‰æã: [("üõí –ü–æ–∫—É–ø–∫–∏", 5), ("üí° –ò–¥–µ–∏", 2)]
        """
        async with self.sm() as s:
            query = (
                select(Note.category, func.count(Note.id).label("count"))
                .where(Note.user_id == user_id, Note.status == "active")
                .group_by(Note.category)
                .order_by(func.count(Note.id).desc())
            )
            result = await s.execute(query)
            return result.all()