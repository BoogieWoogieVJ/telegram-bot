import asyncio
from contextlib import suppress
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,)

from config import get_settings
from logging_conf import setup_logging
from db.base import init_db, Base
from db.repositories import UsersRepo, NotesRepo
from middlewares.traffic import TrafficLogMiddleware
from middlewares.auto_delete import AutoDeleteCommandsMiddleware
from ai_service import init_openai, analyze_note  # ‚Üê –ù–û–í–û–ï

settings = get_settings()
logger = setup_logging(settings.env)

LAST_REPLY: Dict[int, int] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ on_startup)
users_repo: Optional[UsersRepo] = None
notes_repo: Optional[NotesRepo] = None

async def delete_last_reply(chat_id: int) -> None:
    msg_id: Optional[int] = LAST_REPLY.get(chat_id)
    if msg_id:
        with suppress(Exception):
            await bot.delete_message(chat_id, msg_id)
        LAST_REPLY.pop(chat_id, None)

def _norm(text: str) -> str:
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä + –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    return (text or "").strip().casefold()

bot = Bot(token=settings.bot_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

dp.middleware.setup(TrafficLogMiddleware(
    log_payload=(settings.env == "dev")
))
dp.middleware.setup(AutoDeleteCommandsMiddleware())

# –º–µ–Ω—é
MAIN_KB = ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_KB.add(KeyboardButton("üì¶ –ê—Ä—Ö–∏–≤"), KeyboardButton("üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
MAIN_KB.add(KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))


# ===== STARTUP / SHUTDOWN HANDLERS =====

async def on_startup(dispatcher):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    """
    global users_repo, notes_repo
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"üìù –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {settings.db_url}")
    
    try:
        # ‚Üê –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI API
        init_openai(settings.openai_api_key)
        logger.info("‚úÖ OpenAI API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞—ë–º engine –∏ sessionmaker)
        # init_db —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ async_engine –∏ async_session
        async_session_maker = await init_db(settings.db_url)
        logger.info("‚úÖ Engine –∏ SessionMaker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º engine –∏–∑ db.base (–æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ init_db)
        from db.base import async_engine as engine
        if engine is None:
            raise RuntimeError("‚ùå Engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ init_db()")
        
        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã / —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        users_repo = UsersRepo(async_session_maker)
        notes_repo = NotesRepo(async_session_maker)
        logger.info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise


async def on_shutdown(dispatcher):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    """
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    try:
        from db.base import async_engine as engine
        if engine:
            await engine.dispose()
            logger.info("‚úÖ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î: {e}")


# ===== HANDLERS =====

@dp.message_handler(commands=["start"])
async def on_start(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
    if users_repo:
        await users_repo.ensure(message.from_user.id, message.from_user.username)
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} (@{message.from_user.username}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    await message.answer(
        "\u2060",
        reply_markup=MAIN_KB
    )


@dp.message_handler(lambda m: (m.text or "").lower() in {"üì¶ –∞—Ä—Ö–∏–≤", "–∞—Ä—Ö–∏–≤"})
async def show_archive(message: types.Message):
    await delete_last_reply(message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    if notes_repo:
        user_notes = await notes_repo.list_latest(message.from_user.id, limit=10)
        if user_notes:
            notes_text = "\n".join([f"‚Ä¢ {note.text}" for note in user_notes])
            sent = await message.answer(f"üì¶ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n{notes_text}")
        else:
            sent = await message.answer("üì¶ –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–∏, –∞ –ø–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ")
    else:
        sent = await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    LAST_REPLY[message.chat.id] = sent.message_id


@dp.message_handler(lambda m: (m.text or "").lower() in {"‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"})
async def show_help(message: types.Message):
    await delete_last_reply(message.chat.id)
    sent = await message.answer(
        "‚ÑπÔ∏è –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏.\n"
        "–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–µ –≤ —á–∞—Ç (3-60 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é,\n"
        "–¥–æ–±–∞–≤–ª—é –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –Ω–µ–π –∏\n"
        "–ø—Ä–∏—Å–≤–æ—é –µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n"
        "–ü–æ–∑–∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    )
    LAST_REPLY[message.chat.id] = sent.message_id


# ‚Üê –ù–û–í–û–ï: –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(lambda m: (m.text or "").lower() in {"üóÇÔ∏è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"})
async def show_categories(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–º–µ—Ç–æ–∫.
    """
    await delete_last_reply(message.chat.id)
    
    if not notes_repo:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        categories = await notes_repo.get_all_categories(message.from_user.id)
        
        if not categories:
            sent = await message.reply("üìÇ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
        else:
            text = "üìÇ –¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            for category, count in categories:
                text += f"{category} (<b>{count}</b>)\n"
            
            sent = await message.reply(text)
        
        LAST_REPLY[message.chat.id] = sent.message_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", exc_info=True)
        await message.reply("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


@dp.message_handler(content_types=[types.ContentType.TEXT])
async def handle_note(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ –ë–î —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º.
    """
    text = (message.text or "").strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–º–µ—Ç–∫–∏ (3-60 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) < 3 or len(text) > 60:
        await message.reply(
            "‚ùå –ó–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        )
        return
    
        await delete_last_reply(message.chat.id)
    
    try:
        if notes_repo and users_repo:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            await users_repo.ensure(message.from_user.id, message.from_user.username)
            
            # ‚Üê –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
            status_msg = await message.reply("‚è≥ –ê–Ω–∞–ª–∏–∑...")
            
            # ‚Üê –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_categories = await notes_repo.get_all_categories(message.from_user.id)
            user_categories = [cat for cat, _ in existing_categories] if existing_categories else []
            # ‚Üê –ù–û–í–û–ï: —Ñ–∏–ª—å—Ç—Ä—É–µ–º None
            user_categories = [cat for cat in user_categories if cat is not None]
            
            # ‚Üê –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò
            ai_result = await analyze_note(text, user_categories)
            category = ai_result.get("category", "üéØ –ü—Ä–æ—á–µ–µ")
            description = ai_result.get("description", "")
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É
            note = await notes_repo.create(
                user_id=message.from_user.id,
                text=text,
                category=category,
                description=description
            )
            
            # ‚Üê –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
            with suppress(Exception):
                await bot.delete_message(message.chat.id, status_msg.message_id)
            
            logger.info(f"üíæ –ó–∞–º–µ—Ç–∫–∞ #{note.id} —Å–æ–∑–¥–∞–Ω–∞: {text} ‚Üí {category}")
            
            # ‚Üê –ù–û–í–û–ï: –ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç –ò–ò
            await message.reply(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üìù\n\n"
                f"<b>–¢–µ–∫—Å—Ç:</b> {text}\n"
                f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
            )
            
        else:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", exc_info=True)
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")


# ===== MAIN =====

if __name__ == "__main__":
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
    )