# middlewares/auto_delete.py

from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram import types
import logging

logger = logging.getLogger(__name__)

DELETE_COMMANDS = {"/menu", "/start"}
DELETE_BUTTON_TEXTS = {"üì¶ –∞—Ä—Ö–∏–≤", "‚ùì –ø–æ–º–æ—â—å"} 

def norm(s: str) -> str:
    return (s or "").strip().casefold()

class AutoDeleteCommandsMiddleware(BaseMiddleware):
    async def on_process_message(self, message: types.Message, data: dict):
        txt = (message.text or "").strip()
        if not txt:
            return

        first = txt.split()[0]  # –ø–µ—Ä–≤–æ–µ "—Å–ª–æ–≤–æ" (–¥–ª—è /–∫–æ–º–∞–Ω–¥)
        should_delete = (
            first in DELETE_COMMANDS                      # /menu, /start, ...
            or norm(txt) in {norm(t) for t in DELETE_BUTTON_TEXTS}  # "üì¶ –ê—Ä—Ö–∏–≤", "‚ùì –ü–æ–º–æ—â—å"
        )

        if should_delete:
            try:
                await message.delete()
                logger.debug(f"–£–¥–∞–ª–µ–Ω–æ: {txt!r}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")